name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FORCE_COLOR: 1

permissions:
  contents: read

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    permissions:
      attestations: write
      contents: read
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            os-name: macos
          - os: ubuntu-latest
            os-name: linux
          - os: windows-latest
            os-name: windows

    steps:

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        show-progress: false

    - name: Setup Node
      uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
      with:
        node-version: '20.x'

    - name: Get npm cache directory
      id: npm-cache-dir
      run: echo "dir=$(npm config get cache)" >> "${GITHUB_OUTPUT}"

    - name: Setup npm cache
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Install packages
      run: npm ci

    - name: Build and Test
      shell: pwsh
      run: ./build.ps1

    - uses: codecov/codecov-action@13ce06bfc6bbe3ecf90edbbf1bc32fe5978ca1d3 # v5.3.1
      name: Upload coverage to Codecov
      with:
        flags: ${{ matrix.os-name }}
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Generate SBOM
      uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # v0.18.0
      if: runner.os == 'Linux'
      with:
        artifact-name: update-dotnet-sdk.spdx.json
        output-file: update-dotnet-sdk.spdx.json
        path: .

    - name: Attest dist
      uses: actions/attest-build-provenance@520d128f165991a6c774bcb264f323e3d70747f4 # v2.2.0
      if: |
        runner.os == 'Linux' &&
        github.ref_name == github.event.repository.default_branch
      with:
        subject-path: ./dist/**/*.js

  lint:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        filter: 'tree:0'
        show-progress: false

    - name: Add actionlint problem matcher
      run: echo "::add-matcher::.github/actionlint-matcher.json"

    - name: Lint workflows
      uses: docker://rhysd/actionlint@sha256:887a259a5a534f3c4f36cb02dca341673c6089431057242cdc931e9f133147e9 # v1.7.7
      with:
        args: -color

    - name: Lint markdown
      uses: DavidAnson/markdownlint-cli2-action@05f32210e84442804257b2a6f20b273450ec8265 # v19.1.0
      with:
        config: '.markdownlint.json'
        globs: |
          **/*.md

    - name: Install PowerShell modules
      shell: pwsh
      env:
        POWERSHELL_YAML_VERSION: '0.4.12'
        PSSCRIPTANALYZER_VERSION: '1.23.0'
      run: |
        Install-Module -Name powershell-yaml -Force -MaximumVersion ${env:POWERSHELL_YAML_VERSION}
        Install-Module -Name PSScriptAnalyzer -Force -MaximumVersion ${env:PSSCRIPTANALYZER_VERSION}

    - name: Lint PowerShell
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"

        Invoke-ScriptAnalyzer -Path . -Recurse -IncludeDefaultRules -ReportSummary -Severity @('Error','Warning') -EnableExit

        $workflowsPath = (Join-Path ${env:GITHUB_WORKSPACE} ".github" "workflows")

        $workflows = @()
        $workflows += Get-ChildItem -Path $workflowsPath -Filter *.yml
        $workflows += Get-ChildItem -Path $workflowsPath -Filter *.yaml

        $hasIssues = $false

        foreach ($file in $workflows) {
          $path = $file.FullName
          $content = Get-Content -Path $file.FullName -Raw

          $fileName = $path.Substring($PWD.Path.Length + 1).Replace('\', '/')
          $workflow = ConvertFrom-Yaml -Yaml $content

          Write-Output "Linting ${fileName}..."

          $errors = 0
          $warnings = 0

          foreach ($job in $workflow.jobs) {
            foreach ($step in $job.Values.steps) {
              if ($step.run -And $step.shell -eq 'pwsh') {
                $script = $step.run

                $firstLine = $script.Split("`n")[0]
                $offset    = (Select-String $path -Pattern ([regex]::Escape($firstLine))).LineNumber

                $issues = Invoke-ScriptAnalyzer -ScriptDefinition $script -IncludeDefaultRules -Severity @('Error','Warning')

                $errors   += $issues.Where({$_.Severity -eq 'Error' -or $_.Severity -eq 'ParseError'}).Count
                $warnings += $issues.Count - $errors

                foreach ($issue in $issues) {
                  $hasIssues = $true
                  $level = $issue.Severity -eq "Warning" ? "warning" : "error"
                  $line = $offset + $issue.Line - 1
                  Write-Output "::${level} file=${fileName},line=${line},title=PSScriptAnalyzer::${issue}"
                }
              }
            }
          }
        }

        if ($hasIssues) {
          # https://github.com/actions/runner/issues/351
          $Host.SetShouldExit(1)
        }

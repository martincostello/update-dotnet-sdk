name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FORCE_COLOR: 1
  # renovate: datasource=github-releases depName=powershell-yaml packageName=cloudbase/powershell-yaml
  POWERSHELL_YAML_VERSION: '0.4.12'
  # renovate: datasource=github-releases depName=PSScriptAnalyzer packageName=PowerShell/PSScriptAnalyzer
  PSSCRIPTANALYZER_VERSION: '1.24.0'
  # renovate: datasource=github-releases depName=zizmor packageName=zizmorcore/zizmor
  ZIZMOR_VERSION: '1.16.0'

permissions: {}

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    permissions:
      attestations: write
      contents: read
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            os-name: macos
          - os: ubuntu-latest
            os-name: linux
          - os: windows-latest
            os-name: windows

    steps:

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        filter: 'tree:0'
        persist-credentials: false
        show-progress: false

    - name: Setup Node
      uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
      with:
        node-version: '24.x'

    - name: Get npm cache directory
      id: npm-cache-dir
      shell: pwsh
      run: |
        "dir=$(npm config get cache)" >> ${env:GITHUB_OUTPUT}

    - name: Setup npm cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Install packages
      run: npm ci

    - name: Build and Test
      shell: pwsh
      run: ./build.ps1

    - uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
      name: Upload coverage to Codecov
      with:
        flags: ${{ matrix.os-name }}
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Generate SBOM
      uses: anchore/sbom-action@8e94d75ddd33f69f691467e42275782e4bfefe84 # v0.20.9
      if: runner.os == 'Linux'
      with:
        artifact-name: update-dotnet-sdk.spdx.json
        output-file: update-dotnet-sdk.spdx.json
        path: .

    - name: Attest dist
      uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
      if: |
        runner.os == 'Linux' &&
        github.ref_name == github.event.repository.default_branch
      with:
        subject-path: ./dist/**/*.js

  lint:
    runs-on: ubuntu-latest

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        filter: 'tree:0'
        persist-credentials: false
        show-progress: false

    - name: Add actionlint problem matcher
      run: echo "::add-matcher::.github/actionlint-matcher.json"

    - name: Lint workflows with actionlint
      uses: docker://rhysd/actionlint:1.7.8@sha256:96d4a8c87dbbfb3bdd324f8fdc285fc3df5261e2decc619a4dd7e8ee52bbfd46
      with:
        args: -color

    - name: Lint workflows with zizmor
      uses: zizmorcore/zizmor-action@e673c3917a1aef3c65c972347ed84ccd013ecda4 # v0.2.0
      with:
        persona: pedantic
        version: ${{ env.ZIZMOR_VERSION }}

    - name: Lint markdown
      uses: DavidAnson/markdownlint-cli2-action@992badcdf24e3b8eb7e87ff9287fe931bcb00c6e # v20.0.0
      with:
        config: '.markdownlint.json'
        globs: |
          **/*.md

    - name: Lint PowerShell in workflows
      uses: martincostello/lint-actions-powershell@5942e3350ee5bd8f8933cec4e1185d13f0ea688f # v1.0.0
      with:
        powershell-yaml-version: ${{ env.POWERSHELL_YAML_VERSION }}
        psscriptanalyzer-version: ${{ env.PSSCRIPTANALYZER_VERSION }}
        treat-warnings-as-errors: true

    - name: Lint PowerShell scripts
      shell: pwsh
      run: |
        $settings = @{
          IncludeDefaultRules = $true
          Severity = @("Error", "Warning")
        }
        $issues = Invoke-ScriptAnalyzer -Path ${env:GITHUB_WORKSPACE} -Recurse -ReportSummary -Settings $settings
        foreach ($issue in $issues) {
          $severity = $issue.Severity.ToString()
          $level = $severity.Contains("Error") ? "error" : $severity.Contains("Warning") ? "warning" : "notice"
          Write-Output "::${level} file=$($issue.ScriptName),line=$($issue.Line),title=PSScriptAnalyzer::$($issue.Message)"
        }
        if ($issues.Count -gt 0) {
          exit 1
        }

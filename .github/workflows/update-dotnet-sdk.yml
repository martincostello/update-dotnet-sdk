name: update-dotnet-sdk

on:
  workflow_call:
    inputs:
      branch-name:
        description: 'The optional Git branch name to use.'
        required: false
        type: string
        default: ''
      channel:
        description: 'The optional .NET release channel to download the SDK for (6.0, 7.0, etc.).'
        required: false
        type: string
        default: ''
      close-superseded:
        description: 'If true, any existing pull requests superseded by any pull request opened by the action are closed.'
        required: false
        type: boolean
        default: true
      commit-message:
        description: 'The optional Git commit message to use.'
        required: false
        type: string
        default: ''
      commit-message-prefix:
        description: 'The optional Git commit message prefix to use if commit-message is not specified.'
        required: false
        type: string
        default: ''
      generate-step-summary:
        description: 'If true, will output a summary of any .NET SDK update to $GITHUB_STEP_SUMMARY.'
        required: false
        type: boolean
        default: true
      global-json-file:
        description: 'The optional path to the global.json file to update.'
        required: false
        type: string
        default: './global.json'
      labels:
        description: 'The optional comma-separated label(s) to apply to Pull Requests generated by the workflow.'
        required: false
        type: string
        default: ''
      organization:
        description: 'The optional GitHub organization to generate a GitHub Access token for when using a GitHub application.'
        required: false
        type: string
      ref:
        description: 'The optional branch, tag or SHA to checkout for the repository.'
        required: false
        type: string
        default: ''
      repo:
        description: 'The optional GitHub repository to generate the pull request against.'
        required: false
        type: string
        default: ${{ github.repository }}
      security-only:
        description: 'If true, .NET SDK updates which do not contain security fixes are ignored.'
        required: false
        type: boolean
        default: false
      quality:
        description: 'The optional value to specify using the latest build of the specified quality in the channel.'
        required: false
        type: string
        default: ''
      update-nuget-packages:
        description: 'If true, the workflow will update any Microsoft-published NuGet packages to their latest versions for the specified .NET release channel.'
        required: false
        type: boolean
        default: true
      dotnet-outdated-version:
        description: 'The version of the dotnet-outdated .NET global tool to use if update-nuget-packages is true.'
        required: false
        type: string
        default: '4.6.4'
      include-nuget-packages:
        description: 'A comma-separated list of NuGet package IDs (or substrings) to update, if update-nuget-packages is true.'
        required: false
        type: string
        default: 'Microsoft.AspNetCore.,Microsoft.EntityFrameworkCore,Microsoft.Extensions.,System.Text.Json'
      exclude-nuget-packages:
        description: 'A comma-separated list of NuGet package IDs (or substrings) to not update if update-nuget-packages is true.'
        required: false
        type: string
        default: ''
      nuget-packages-prerelease-label:
        description: 'An optional pre-release label to restrict NuGet package updates to if update-nuget-packages is true.'
        required: false
        type: string
        default: ''
      user-email:
        description: 'The optional email address to use for the Git commits.'
        required: false
        type: string
        default: 'github-actions[bot]@users.noreply.github.com'
      user-name:
        description: 'The optional user name to use for the Git commits.'
        required: false
        type: string
        default: 'github-actions[bot]'
      dry-run:
        description: 'If true, the workflow will not push changes to GitHub.'
        required: false
        type: boolean
        default: false
      runs-on:
        description: 'The GitHub Actions runner to use.'
        required: false
        type: string
        default: 'ubuntu-latest'
    outputs:
      branch-name:
        description: 'The name of the Git branch associated with the Pull Request created by the workflow if the .NET SDK is updated.'
        value: ${{ jobs.update-dotnet-sdk.outputs.branch-name }}
      pull-request-html-url:
        description: 'The HTML URL of the Pull Request created by the workflow if the .NET SDK is updated.'
        value: ${{ jobs.update-dotnet-sdk.outputs.pull-request-html-url }}
      pull-request-number:
        description: 'The number of the Pull Request created by the workflow if the .NET SDK is updated.'
        value: ${{ jobs.update-dotnet-sdk.outputs.pull-request-number }}
      pull-requests-closed:
        description: 'A JSON array of the numbers of any pull requests that were closed as superseded.'
        value: ${{ jobs.update-dotnet-sdk.outputs.pull-requests-closed }}
      sdk-updated:
        description: 'Whether the .NET SDK was updated by the workflow.'
        value: ${{ jobs.update-dotnet-sdk.outputs.sdk-updated }}
      sdk-version:
        description: 'The latest version of the .NET SDK for the specified channel when the workflow completed.'
        value: ${{ jobs.update-dotnet-sdk.outputs.sdk-version }}
      security:
        description: 'Whether any .NET SDK update includes security fixes.'
        value: ${{ jobs.update-dotnet-sdk.outputs.security }}
    secrets:
      repo-token:
        description: 'The GitHub access token to use to clone the repository, push changes and create a Pull Request for any SDK update.'
        required: false
      application-id:
        description: 'The ID of a GitHub Application to generate a GitHub Access token for to use to clone the repository, push changes and create a Pull Request for any SDK update.'
        required: false
      application-private-key:
        description: 'The private key of a GitHub Application to generate a GitHub Access token for to use to clone the repository, push changes and create a Pull Request for any SDK update.'
        required: false

env:
  TERM: xterm

jobs:

  update-dotnet-sdk:

    name: Update .NET SDK
    runs-on: ${{ inputs.runs-on }}
    # We don't want anyone forking this repository to also run this workflow
    if: github.event.repository.fork == false

    outputs:
      branch-name: ${{ steps.update-dotnet-sdk.outputs.branch-name }}
      pull-request-html-url: ${{ steps.update-dotnet-sdk.outputs.pull-request-html-url }}
      pull-request-number: ${{ steps.update-dotnet-sdk.outputs.pull-request-number }}
      pull-requests-closed: ${{ steps.update-dotnet-sdk.outputs.pull-requests-closed }}
      sdk-updated: ${{ steps.update-dotnet-sdk.outputs.sdk-updated }}
      sdk-version: ${{ steps.update-dotnet-sdk.outputs.sdk-version }}
      security: ${{ steps.update-dotnet-sdk.outputs.security }}

    steps:

    # Ensure that one of the required type of secrets has been specified
    - name: Validate secrets
      id: validate-secrets
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      env:
        APPLICATION_ID: ${{ secrets.application-id }}
        APPLICATION_PRIVATE_KEY: ${{ secrets.application-private-key }}
        REPO_TOKEN: ${{ secrets.repo-token }}
      with:
        result-encoding: string
        script: |
          const token = process.env.REPO_TOKEN || '';
          let useGitHubApp = 'false';
          if (!token) {
            if (!process.env.APPLICATION_ID || !process.env.APPLICATION_PRIVATE_KEY) {
              core.setFailed('Either the repo-token or both the application-id and application-private-key secrets must be set.');
            }
            useGitHubApp = 'true';
          }
          return useGitHubApp;

    # If credentials for a GitHub application were provided, use them to generate a GitHub access token
    - name: Generate GitHub application token
      id: generate-application-token
      if: steps.validate-secrets.outputs.result == 'true'
      uses: peter-murray/workflow-application-token-action@dc0413987a085fa17d19df9e47d4677cf81ffef3 # v3.0.0
      with:
        application_id: ${{ secrets.application-id }}
        application_private_key: ${{ secrets.application-private-key }}
        organization: ${{ inputs.organization }}
        permissions: "contents:write, pull_requests:write"

    - name: Assign GitHub token
      id: assign-token
      env:
        APPLICATION_TOKEN: ${{ steps.generate-application-token.outputs.token }}
        REPO_TOKEN: ${{ secrets.repo-token }}
      shell: pwsh
      run: |
        $accessToken = $env:REPO_TOKEN
        if ([string]::IsNullOrEmpty($accessToken)) {
            $accessToken = $env:APPLICATION_TOKEN
        }
        "access-token=${accessToken}" >> $env:GITHUB_OUTPUT

    # Checkout the repository so the global.json file can be inspected and
    # updated if a new patch version of the SDK is available. The token is
    # used so that the workflow can push any changes back to the repository
    # and that pushes as that user trigger any CI workflows that may trigger
    # on push, such as if any NuGet packages are updated after the PR is opened.
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      with:
        ref: ${{ inputs.ref || '' }}
        repository: ${{ inputs.repo || github.repository }}
        token: ${{ steps.assign-token.outputs.access-token }}

    # Run the action to check if a new version of the .NET SDK is available
    # for the same release channel as the SDK specified in global.json.
    - name: Update .NET SDK
      id: update-dotnet-sdk
      uses: martincostello/update-dotnet-sdk@67d6e2b14939c06978a7f80444157296c3defe14 # v3.2.3
      with:
        branch-name: ${{ inputs.branch-name }}
        channel: ${{ inputs.channel }}
        close-superseded: ${{ inputs.close-superseded }}
        commit-message: ${{ inputs.commit-message }}
        commit-message-prefix: ${{ inputs.commit-message-prefix }}
        dry-run: ${{ inputs.dry-run }}
        generate-step-summary: ${{ inputs.generate-step-summary }}
        global-json-file: ${{ inputs.global-json-file }}
        labels: ${{ inputs.labels }}
        quality: ${{ inputs.quality }}
        repo: ${{ inputs.repo }}
        repo-token: ${{ steps.assign-token.outputs.access-token }}
        security-only: ${{ inputs.security-only }}
        user-email: ${{ inputs.user-email }}
        user-name: ${{ inputs.user-name }}

    # If the action updated the .NET SDK, then install the .NET SDK and then
    # run the dotnet-outdated global tool to update any Microsoft-published
    # NuGet packages for that patch release of .NET to their latest versions too.
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@6bd8b7f7774af54e05809fcc5431931b3eb1ddee # v4.0.1
      if : ${{ inputs.update-nuget-packages && steps.update-dotnet-sdk.outputs.sdk-updated == 'true' }}
      with:
        global-json-file: ${{ inputs.global-json-file }}

    - name: Update NuGet packages
      if : ${{ inputs.update-nuget-packages && steps.update-dotnet-sdk.outputs.sdk-updated == 'true' }}
      shell: pwsh
      env:
        COMMIT_MESSAGE_PREFIX: ${{ inputs.commit-message-prefix }}
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        DOTNET_NOLOGO: true
        DOTNET_OUTDATED_VERSION: ${{ inputs.dotnet-outdated-version || '*' }}
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
        EXCLUDE_NUGET_PACKAGES: ${{ inputs.exclude-nuget-packages }}
        INCLUDE_NUGET_PACKAGES: ${{ inputs.include-nuget-packages }}
        GIT_AUTHOR_EMAIL: ${{ inputs.user-email }}
        GIT_AUTHOR_NAME: ${{ inputs.user-name }}
        NUGET_XMLDOC_MODE: skip
        PRERELEASE_LABEL: ${{ inputs.nuget-packages-prerelease-label || '' }}
        UPDATED_SDK_VERSION: ${{ steps.update-dotnet-sdk.outputs.sdk-version }}
      run: |
        $ErrorActionPreference = "Stop"

        Write-Host "Installing dotnet-outdated-tool..."
        dotnet tool install --global dotnet-outdated-tool --version "$env:DOTNET_OUTDATED_VERSION"

        $tempPath = [System.IO.Path]::GetTempPath()
        $updatesPath = (Join-Path $tempPath "dotnet-outdated.json")

        $eligiblePackages = $env:INCLUDE_NUGET_PACKAGES.Split(',')
        $ineligiblePackages = $env:EXCLUDE_NUGET_PACKAGES.Split(',')
        $prereleaseLabel = $env:PRERELEASE_LABEL

        $additionalArguments = @()

        if (-Not [string]::IsNullOrEmpty($eligiblePackages)) {
          foreach ($package in $eligiblePackages) {
            $additionalArguments += "--include"
            $additionalArguments += $package
          }
        }

        if (-Not [string]::IsNullOrEmpty($ineligiblePackages)) {
          foreach ($package in $ineligiblePackages) {
            $additionalArguments += "--exclude"
            $additionalArguments += $package
          }
        }

        if (-Not [string]::IsNullOrEmpty($prereleaseLabel)) {
          $additionalArguments += "--pre-release-label"
          $additionalArguments += $prereleaseLabel
        }

        # See https://github.com/martincostello/update-dotnet-sdk/issues/785
        $toolsManifest = (Join-Path "." ".config" "dotnet-tools.json")

        if (Test-Path $toolsManifest) {
          Write-Host "Restoring .NET tools..."
          dotnet tool restore
        }

        # .NET workloads need to be restored before running dotnet outdated.
        # This is only supported for .NET 8+ as earlier SDK versions do not support -getTargetResult.
        if ([Version]::new(${env:UPDATED_SDK_VERSION}.Split("-")[0]).Major -ge 8) {
          $projectFiles = @()
          $projectFiles += Get-ChildItem -Path "." -Filter "*.csproj" -Recurse
          $projectFiles += Get-ChildItem -Path "." -Filter "*.fsproj" -Recurse
          $projectFiles += Get-ChildItem -Path "." -Filter "*.vbproj" -Recurse

          $restoreWorkloads = $false
          $targetName = "_GetRequiredWorkloads"

          foreach ($project in $projectFiles) {
            # See https://github.com/dotnet/sdk/blob/051c52977e668544b58f60ff4d4ff84fe67d33f2/src/Cli/dotnet/commands/dotnet-workload/restore/WorkloadRestoreCommand.cs#L46-L81
            $targetsResult = dotnet msbuild $project.FullName "-getTargetResult:${targetName}" "-property:SkipResolvePackageAssets=true"
            if (-Not [string]::IsNullOrEmpty($targetsResult)) {
              $json = $targetsResult | ConvertFrom-Json
              if ($json.TargetResults -And ($json.TargetResults.$targetName.Items.Count -gt 0)) {
                $restoreWorkloads = $true
                break
              }
            }
          }

          if ($restoreWorkloads) {
            Write-Host "Restoring .NET workloads..."
            dotnet workload restore
          }
        }

        # HACK Inspired by https://github.com/dotnet-outdated/dotnet-outdated/issues/55
        # run dotnet restore to populate the NuGet package cache to try and avoid timeouts
        # when dotnet-outdated is run
        Write-Host "Restoring NuGet packages..."
        dotnet restore

        Write-Host "Checking for .NET NuGet package(s) to update..."

        # The --version-lock Major option is used to only update packages
        # to the latest patch version of the current major version.
        # The --include flags are used to only update Microsoft-published
        # NuGet packages that are typically published with a new patch
        # release of .NET that accompanies a new .NET SDK release.
        dotnet outdated `
          --upgrade `
          --version-lock Major `
          --output $updatesPath `
          $additionalArguments

        $dependencies = @()

        # Determine the distinct set of package updates that were applied, if any.
        if (Test-Path $updatesPath) {
          $dependencies = `
            Get-Content -Path $updatesPath | `
            ConvertFrom-Json | `
            Select-Object -ExpandProperty projects | `
            Select-Object -ExpandProperty TargetFrameworks | `
            Select-Object -ExpandProperty Dependencies | `
            Sort-Object -Property Name -Unique
        }

        if ($dependencies.Count -gt 0) {
          Write-Host "Found $($dependencies.Count) .NET NuGet package(s) to update." -ForegroundColor Green

          $commitMessageLines = @()

          # Generate the commit message in a way that contains metadata similar to the way
          # commit messages from dependabot updates are generated so that the approve-and-merge
          # workflow can parse the commits to determine which packages were updated so that
          # it can determine whether or not it is appropriate to approve the PR and then
          # automatically merge it if the required statuses for the pull request are successful.
          if ($dependencies.Count -eq 1) {
            $commitMessageLines += "Bump $($dependencies[0].Name) from $($dependencies[0].ResolvedVersion) to $($dependencies[0].LatestVersion)"
            $commitMessageLines += ""
            $commitMessageLines += "Bumps $($dependencies[0].Name) from $($dependencies[0].ResolvedVersion) to $($dependencies[0].LatestVersion)."
          } else {
            $commitMessageLines += "Bump .NET NuGet packages"
            $commitMessageLines += ""
            $commitMessageLines += "Bumps .NET dependencies to their latest versions for the .NET $($env:UPDATED_SDK_VERSION) SDK."
            $commitMessageLines += ""
            foreach ($dependency in $dependencies) {
              $commitMessageLines += "Bumps $($dependency.Name) from $($dependency.ResolvedVersion) to $($dependency.LatestVersion)."
            }
          }

          if (-Not [string]::IsNullOrEmpty($env:COMMIT_MESSAGE_PREFIX)) {
            $commitMessageLines[0] = "$($env:COMMIT_MESSAGE_PREFIX) $($commitMessageLines[0])"
          }

          $commitMessageLines += ""
          $commitMessageLines += "---"
          $commitMessageLines += "updated-dependencies:"

          foreach ($dependency in $dependencies) {
            $commitMessageLines += "- dependency-name: $($dependency.Name)"
            $commitMessageLines += "  dependency-type: direct:production"
            $commitMessageLines += "  update-type: version-update:semver-$($dependency.UpgradeSeverity.ToLowerInvariant())"
          }

          $commitMessageLines += "..."
          $commitMessageLines += ""
          $commitMessageLines += ""

          $commitMessage = $commitMessageLines -join "`n"

          git config user.email $env:GIT_AUTHOR_EMAIL
          git config user.name $env:GIT_AUTHOR_NAME

          git add .
          git commit -m $commitMessage -s
          git push

          Write-Host "Pushed update to $($dependencies.Count) NuGet package(s)." -ForegroundColor Green
        }
        else {
          Write-Host "There are no .NET NuGet packages to update." -ForegroundColor Green
        }
